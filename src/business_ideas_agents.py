import functools
from pprint import pprint
from typing import TypedDict, Optional, List

from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from pydantic import BaseModel, Field
import os
from dotenv import load_dotenv
from business_plan_agent import business_plan_node


load_dotenv()

llm = ChatOpenAI(model="gpt-4o", temperature=0)


class GraphState(TypedDict):
    """ Represents the state of our graph """
    prompt: str
    business_ideas: list[str]
    business_ideas_plans: list[dict[str, str]]
    business_idea_number: int


def should_end(state: GraphState):
    if state["business_idea_number"] >= len(state["business_ideas"]):
        return END
    return "business_plan"


class GeneratedIdeas(BaseModel):
    """generate business ideas in this format"""
    business_ideas: Optional[List[str]] = Field(
        [], description="list of the business ideas generated by the assistant")


system_prompt_business_ideas = """
you are an assistant who generates business ideas. 
you will generate business ideas based on the input given by the human.
Make sure to answer in json format
Generate at most 2 business ideas.

here is one example:
example_user: can you generate some business ideas for me related to real estate?
example_assistant: {{"business_ideas": ["real estate app", "real estate investment platform", "real estate management software"]}}
"""

business_ideas = ChatPromptTemplate.from_messages([
    ("system", system_prompt_business_ideas),
    ("human", "{prompt}")

])

business_ideas_agent = business_ideas | llm.with_structured_output(
    GeneratedIdeas, method="json_mode")


def business_ideas_node(state):
    result = business_ideas_agent.invoke(state)
    if "business_ideas" in result:
        state["business_ideas"] = result["business_ideas"]
    return state


# initialize the workflow
agents_workflow = StateGraph(GraphState)
# add nodes and edges
agents_workflow.add_node("business_idea", business_ideas_node)
agents_workflow.add_node("business_plan", business_plan_node)
agents_workflow.add_edge("business_idea", "business_plan")
# add conditional edges
agents_workflow.add_conditional_edges("business_plan", should_end)
# set entry point which node to start from
agents_workflow.set_entry_point("business_idea")
# compile the graph
app = agents_workflow.compile()

# print(app.get_graph().print_ascii())

prompt = """can you generate some business ideas for me related to recruitment market focus on Tech recruiting?"""
for output in app.stream({"prompt": prompt, "business_ideas_plans": [], "business_idea_number": 0},
                         stream_mode="values"):
    print(output)
